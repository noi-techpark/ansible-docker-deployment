---
- name: Log into AWS ECR docker registry
  shell: "aws ecr get-login-password | docker login --username AWS --password-stdin {{ docker_deployment_aws_ecr_repository }}"

- name: Create the project folder
  file:
    dest: /var/docker/{{ docker_deployment_project_name }}
    state: directory
    mode: 0755

- name: Pre release setup hook
  include: "{{ docker_deployment_pre_release_setup_hook }}"
  when: docker_deployment_pre_release_setup_hook is not none and docker_deployment_pre_release_setup_hook != ""

- name: Create the release folder
  file:
    dest: /var/docker/{{ docker_deployment_project_name }}/releases/{{ docker_deployment_release_name }}
    state: directory
    mode: 0755

- name: Copy release files
  copy:
    src: '{{ item.local }}'
    dest: /var/docker/{{ docker_deployment_project_name }}/releases/{{ docker_deployment_release_name }}/{{ item.remote }}
  loop: '{{ docker_deployment_release_files }}'

- name: Give release files right permissions
  file:
    path: /var/docker/{{ docker_deployment_project_name }}/releases/{{ docker_deployment_release_name }}/{{ item.remote }}
    mode: "{{ item.mode }}"
    recurse: "{{ item.recurse | default(yes) }}"
  when: (item.mode | default(none)) != none
  loop: '{{ docker_deployment_release_files }}'

- name: Create the shared folder
  file:
    dest: /var/docker/{{ docker_deployment_project_name }}/shared
    state: directory
    mode: 0755

- name: Copy shared files
  copy:
    src: '{{ item.local }}'
    dest: /var/docker/{{ docker_deployment_project_name }}/shared/{{ item.remote }}
    force: no
  loop: '{{ docker_deployment_shared_files }}'

- name: Give shared files right permissions
  file:
    path: /var/docker/{{ docker_deployment_project_name }}/shared/{{ item.remote }}
    mode: "{{ item.mode }}"
    recurse: "{{ item.recurse | default(yes) }}"
  when: (item.mode | default(none)) != none
  loop: '{{ docker_deployment_shared_files }}'

- name: Link shared files into release folder
  file:
    src: /var/docker/{{ docker_deployment_project_name }}/shared/{{ item.remote }}
    dest: /var/docker/{{ docker_deployment_project_name }}/releases/{{ docker_deployment_release_name }}/{{ item.remote }}
    state: link
  loop: '{{ docker_deployment_shared_files }}'

- name: Post release setup hook
  include: "{{ docker_deployment_post_release_setup_hook }}"
  when: docker_deployment_post_release_setup_hook is not none and docker_deployment_post_release_setup_hook != ""

- name: Check if current folder exists
  stat:
    path: /var/docker/{{ docker_deployment_project_name }}/current
  register: docker_deployment_current_folder_stats

- name: Stop old Docker containers
  docker_compose:
    project_src: /var/docker/{{ docker_deployment_project_name }}/current
    state: absent
  when: docker_deployment_current_folder_stats.stat.exists

- name: Updating current link
  file:
    src: /var/docker/{{ docker_deployment_project_name }}/releases/{{ docker_deployment_release_name }}
    dest: /var/docker/{{ docker_deployment_project_name }}/current
    state: link

- name: Start the release
  block:
    - name: Start new Docker containers (continuous execution)
      docker_compose:
        project_src: /var/docker/{{ docker_deployment_project_name }}/current
        state: present
        pull: yes
      when: docker_deployment_execution_type == "app"

    - name: Run health checks (continuous execution)
      shell:
        chdir: /var/docker/{{ docker_deployment_project_name }}/current
        cmd: python3 /var/docker/healthchecks.py
      when: docker_deployment_execution_type == "app"

    - name: Start new Docker containers (one time execution)
      shell: "cd /var/docker/{{ docker_deployment_project_name }}/current && docker-compose up --abort-on-container-exit"
      when: docker_deployment_execution_type == "task"

  rescue:
    - name: Stop new Docker containers
      docker_compose:
        project_src: /var/docker/{{ docker_deployment_project_name }}/current
        state: absent

    - name: Delete current link if old release did not exist
      file:
        path: /var/docker/{{ docker_deployment_project_name }}/current
        state: absent
      when: docker_deployment_current_folder_stats.stat.exists == False 

    - name: Revert current link if old release existed
      file:
        src: '{{ docker_deployment_current_folder_stats.stat.lnk_source }}'
        dest: /var/docker/{{ docker_deployment_project_name }}/current
        state: link
      when: docker_deployment_current_folder_stats.stat.exists

    - name: Start old Docker containers if old release existed
      docker_compose:
        project_src: /var/docker/{{ docker_deployment_project_name }}/current
        state: present
      when: docker_deployment_current_folder_stats.stat.exists and docker_deployment_execution_type == "app"

    - name: Fail the deployment
      fail:
        msg: The deployment failed, because the 'docker-compose up' command failed or the containers did not reach a healthy state.
